package com.gravitycode.solitaryfitness.util

import com.gravitycode.solitaryfitness.logworkout.data.sync.LazySyncDataService
import kotlinx.coroutines.delay

/**
 * TODO: This is a function that was generated by ChatGPT which may be useful (maybe try implementing
 *  [LazySyncDataService]) with it.
 *
 * Would also be good to make it work on functions that return Booleans or Results, i.e.
 *
 * `<T> (() -> Boolean).retry`
 *
 * and
 *
 * `<T> (() -> Result<T>).retry`
 *
 * and there should be listeners that get triggered when an attempt is being made, when it fails completely,
 * and when it succeeds (implementing LazySyncDataService) with this function will shine more light on it,
 * but I shouldn't touch that class until I have tests for it.
 * */
suspend fun <T> (() -> T).retry(
    times: Int,
    initialDelayMillis: Long = 100,
    maxDelayMillis: Long = 1000,
    factor: Double = 2.0
): T {

    var currentDelay = initialDelayMillis
    repeat(times - 1) { _ ->
        try {
            return this()
        } catch (e: Exception) {
            // Log the exception or handle it as needed
        }
        delay(currentDelay)
        currentDelay = (currentDelay * factor).toLong().coerceAtMost(maxDelayMillis)
    }
    // Final attempt without delay
    return this()
}